services:
  db:
    container_name: postgres
    image: postgres:15.1-alpine
    restart: always
    networks:
      - app
    environment:
      - POSTGRES_USER:$TYPEORM_USERNAME
      - POSTGRES_PASSWORD:$TYPEORM_PASSWORD
      - POSTGRES_DB:$TYPEORM_DATABASE
    volumes:
      - ./pgdata:/var/lib/postgresql/data
    ports:
      - $TYPEORM_PORT:$TYPEORM_PORT
  backend:
    container_name: backend
    build:
      context: .
      dockerfile: Dockerfile.prod
    restart: always
    networks:
      - app
    volumes:
      - ./src:/app/src/
    depends_on:
      - db
    ports:
      - $API_PORT:$API_PORT
    environment:
      - NODE_ENV=production
      - API_PORT=$API_PORT 
      - API_HOST=$API_HOST 
      - TYPEORM_CONNECTION=$TYPEORM_CONNECTION 
      - TYPEORM_USERNAME=$TYPEORM_USERNAME 
      - TYPEORM_PASSWORD=$TYPEORM_PASSWORD 
      - TYPEORM_DATABASE=$TYPEORM_DATABASE 
      - TYPEORM_PORT=$TYPEORM_PORT 
      - TYPEORM_HOST=postgres 
      - JWT_SECRET=$JWT_SECRET 
      - COOKIE_SECRET=$COOKIE_SECRET

      - MAIL_TRANSPORT=$MAIL_TRANSPORT 
      - MAIL_FROM_NAME= $MAIL_FROM_NAME 
      - MAIL_TO=$MAIL_TO 
      - MAIL_USER=$MAIL_USER 
      - MAIL_PASSWORD=$MAIL_PASSWORD 
      - MAIL_HOST=$MAIL_HOST

      - EXPIRES_IN_1D=$EXPIRES_IN_1D
      - EXPIRES_IN_30D=$EXPIRES_IN_30D
networks:
  app:
    driver: bridge
volumes:
  pgdata:
  src:
